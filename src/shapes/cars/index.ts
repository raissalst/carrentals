import {
    getRepository,
    Repository,
  } from "typeorm";
  import { Car } from "../../entities/Car";
  
  interface CarRepo {
    save: (car: Car) => Promise<Car>;
    getAll: () => Promise<Car[]>;
    saveMultiple: (cars: Car[]) => Promise<any>;
  }
  
  class CarRepository implements CarRepo {
    private ormRepo: Repository<Car>;
  
    constructor() {
      this.ormRepo = getRepository(Car);
    }
    
    // - [POST] â†’ *registra carro (como array de objetos) (autorizaÃ§Ã£o para empresa)ðŸ”’*
    save = async (car: Car) => await this.ormRepo.save(car);    
    saveMultiple = async (cars: Car[]) => {
      return await this.ormRepo
        .createQueryBuilder() 
        .insert() 
        .values(cars) 
        .returning(["*"]) //retornar tudo
        .execute() 
        .then((cars) => cars.generatedMaps);  
    };  
    
    // - [GET] â†’ *visualizar dados pÃºblicos (tudo menos placa, chassis, km e isActive) de todos os carros disponÃ­veis (available=true e active=true) cadastrados na plataforma (autorizaÃ§Ã£o para admin, empresa e cliente)ðŸ”’*
    getAll = async () => await this.ormRepo.find();

    // - ***?available=false ou ?active=false*** ***ou ?available=false&&active=false*** [GET] â†’ *filtrar por query params dados pÃºblicos de todos os carros que nÃ£o estÃ£o disponÃ­veis para alugar (autorizaÃ§Ã£o apenas para admins)ðŸ”’*
    getNotActiveAndNotAvailCarsByParam = async (params) => await this.ormRepo.find({where: params});
    
    // - ***filtro=...*** [GET] â†’ *filtrar por query params (name, model, brand, year, color, doors, fuelType, gear, rentalPricePerDay) todos os carros disponÃ­veis e ativos (autorizaÃ§Ã£o apenas para clientes)ðŸ”’*
    getActivCarsByParam = async (params) => await this.ormRepo.find({where: params});

    // - **/<:id>** [POST] â†’ *alugar um carro (autorizaÃ§Ã£o apenas para clientes) ðŸ”’*
    saveIntoRentals = async (id) => await this.ormRepo.save(id)   //como fazer??
    
    getById = async (id) => await this.ormRepo.findOne(id)
    // - **/<:id>** [GET] â†’ *visualizar os dados pÃºblicos de um carro (tudo menos placa, chassis, km e isActive) (autorizaÃ§Ã£o apenas para empresa, cliente ou admin) ðŸ”’*

    updateCarData = async (data, entidade) => await this.ormRepo.update(data, entidade) // necessita 2 parametros
    // - **/<:id>** [PATCH] â†’ *atualizar dados de um carro (autorizaÃ§Ã£o apenas para empresas)ðŸ”’*
    
    // - **/<:id>** [DELETE] â†’ *desativar um carro (autorizaÃ§Ã£o apenas para empresas)  ðŸ”’*  RETIRAR?
    
  }
  
  export default CarRepository;
